@use "sass:list";
@use "sass:map";


///
/// Fonts to include the system emoji fonts
///
/// @param {string...} $custom-fonts the custom fonts to include (variadic argument)
/// @output the `font-family` including emoji fonts
///
@mixin emoji-fonts ($custom-fonts...) {
	font-family:
		#{$custom-fonts},
		// Emoji fonts
		"Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}


///
/// Complete stack of system fonts
///
/// @param {string...} $custom-fonts the custom fonts to include (variadic argument)
/// @output the `font-family` with all fonts, including emoji fonts
///
@mixin system-fonts ($custom-fonts...) {
	@include emoji-fonts (
		#{$custom-fonts},
		// Safari for macOS and iOS (San Francisco)
		-apple-system,
		// Chrome >= 56 for macOS (San Francisco), Windows, Linux and Android
		system-ui,
		// Chrome < 56 for macOS (San Francisco)
		BlinkMacSystemFont,
		// Windows
		"Segoe UI",
		// Android
		"Roboto",
		// Basic web fallback
		"Helvetica Neue", Arial, sans-serif
	);
}


///
/// Declares a font in all given variants.
///
/// You should use the "correct" font name as `$font-family` and it will automatically set up `font-weight`
/// and `font-style` for you.
///
/// This method will auto-generate the file names for you, so you need to name your files accordingly.
/// It will just concat the `$relative-path` with the font weight, style and the format as extension.
///
/// Examples of generated file names:
///
///		• Arial-300-italic.woff2
///		• Arial-700-normal.woff
///
/// @example
///
///		@include declare-font(
///			"../font/arial",
///			"Arial",
///			(regular: 400, bold: 700)
///		)
///
///		// will generate:
///
///		@font-face {
///			font-family: "Arial";
///			font-weight: 400;
///			src: url("../font/arial-400-normal.woff2") format("woff2"), ...;
///		}
///		// ...
///
/// @param {string} 				$relative-path 	The path to the font file, relative to the CSS file.
/// @param {string} 				$font-family 	The name of the font family
/// @param {Map<String, Number>}	$font-weights	The supported font weights as numerical list
/// @param {String[]}				$font-styles	The supported font styles
/// @param {String[]}				$types			The supported file types
///
$font-type-file-extension-map: (
	opentype: "otf",
);

@mixin declare-font (
	$relative-path,
	$font-family,
	$font-weights,
	$font-styles: (normal italic),
	$types: (woff2 woff),
	$font-display: fallback
) {
	@each $font-weight-label, $font-weight in $font-weights {
		@each $font-style in $font-styles {
			@font-face {
				$src : ();

				@each $type in $types {
					$file-extension: $type;

					@if (map.has-key($font-type-file-extension-map, $type)) {
						$file-extension: map.get($font-type-file-extension-map, $type);
					}
					$src: list.append($src, url("#{$relative-path}-#{$font-weight}-#{$font-style}.#{$file-extension}") format("#{$type}"), comma);
				}

				font-family: $font-family;
				font-weight: $font-weight;
				font-style: $font-style;
				font-display: $font-display;
				src: $src;
			}
		}
	}
}


///
/// Fetches the font weight from the map of available font weights.
///
/// You should wrap this helper mixin in your project to have a project-specific mixin
///
/// @example
/// 	@mixin font-weight ($font-weight) {
/// 		@include atlantis.fetch-font-weight($font-weight, variables.$font-weights);
/// 	}
///
/// 	@mixin headline-font-weight ($font-weight) {
/// 		@include atlantis.fetch-font-weight($font-weight, variables.$headline-font-weights);
/// 	}
///
@mixin fetch-font-weight ($font-weight, $available-font-weights) {
	@if ($font-weight != null) {
		@if (not map.has-key($available-font-weights, $font-weight)) {
			@error "Unknown font weight: #{$font-weight}";
		}

		font-weight: map.get($available-font-weights, $font-weight);
	}
}
