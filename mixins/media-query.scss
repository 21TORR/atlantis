@use "sass:list";
@use "sass:math";
@use "sass:string";

///
/// Normalizes the given value to px
///
@function normalize-to-px($value) {
	$unit: math.unit($value);

	@if ("px" == $unit) {
		@return $value;
	}
	@else if ("rem" == $unit) {
		@return math.div($value, 1rem) * 10px;
	}
	@else {
		@error "Can't automatically convert value with unit '#{$unit}'";
	}
}


///
/// Mixin to include a media query for max-width
///
@mixin on-max-width ($max-width) {
	@include on-media($max-width: $max-width) {
		@content;
	}
}


///
/// Mixin to include a media query for max-width
///
@mixin on-min-width ($min-width) {
	@include on-media($min-width: $min-width) {
		@content;
	}
}


///
/// Mixin to include a media query for max-height
///
@mixin on-max-height ($max-height) {
	@include on-media($max-height: $max-height) {
		@content;
	}
}


///
/// Mixin to include a media query for min-height
///
@mixin on-min-height ($min-height) {
	@include on-media($min-height: $min-height) {
		@content;
	}
}

@mixin on-media (
	$min-width: null,
	$min-height: null,
	$max-width: null,
	$max-height: null
) {
	$list: ();

	@if ($min-width != null) {
		$list: list.append(
			$list,
			string.unquote("(min-width: #{normalize-to-px($min-width)})")
		);
	}

	@if ($min-height != null) {
		$list: list.append(
			$list,
			string.unquote("(min-height: #{normalize-to-px($min-height)})")
		);
	}

	@if ($max-width != null) {
		$list: list.append(
			$list,
			string.unquote("(max-width: #{normalize-to-px($max-width)})")
		);
	}

	@if ($max-height != null) {
		$list: list.append(
			$list,
			string.unquote("(max-height: #{normalize-to-px($max-height)})")
		);
	}

	@if (list.length($list) == 0) {
		@content;
	}
	@else {
		$query: "screen";

		@each $entry in $list {
			$query: string.unquote("#{$query} and #{$entry}");
		}

		@media #{$query} {
			@content;
		}
	}

}
